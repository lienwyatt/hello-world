.code16 # Use 16-bit assembly
.globl begin # This tells the linker where we want to start executing
begin:
 cli             
 movb $0x00, %al
 outb  %al, $0x70
 inb $0x71, %al
 #STORE BYTE 
 sti
 movb $0x00,%ah # 0x00 - set video mode
 movb $0x03,%al # 0x03 - 80x25 text mode
 int $0x10 # call into the BIOS
 
 

 
 jmp ask
 

ask:
 movw $question, %si
 jmp print_char
 
  #GET INPUT HERE
  
  
  #COMPARE INPUT TO STORED BYTE

  jne failure
  jmp success

failure:
 movw $wrong, %si
 jmp print_char
 jmp done
 

success:
 movw $message, %si # load the offset of our message into %si
 movw $done, %di
 jmp print_char


print_char:
 lodsb # loads a single byte from (%si) into %al and increments %si
 testb %al,%al # checks to see if the byte is 0
 jz print_char+7 # if so, jump out (jz jumps if ZF in EFLAGS is set)
 movb $0x0E,%ah # 0x0E is the BIOS code to print the single character
 int $0x10 # call into the BIOS using a software interrupt
 jmp print_char # go back to the start of the loop
 ret

done:
 jmp done # loop forever
# The .string command inserts an ASCII string with a null terminator
wrong:
 .string "Wrong!"
question:
 .string "What number am I thinking of (0-9)?"
message:
 .string "Right! Congratulations"
# This pads out the rest of the boot sector and then puts
# the magic 0x55AA that the BIOS expects at the end, making sure
# we end up with 512 bytes in total.
#
# The somewhat cryptic "(. - start)" means "the current address
# minus the start of code", i.e. the size of the code we've written
# so far. So this will insert as many zeroes as are needed to make
# the boot sector 510 bytes log, and
.fill 510 - (. - start), 1, 0#keep
.byte 0x55
.byte 0xAA
